/*演習2-1
 * 符号なし整数を左右にシフトした値が、2のべき乗での蒸散や徐算の演算結果と一致することを確認するプログラム。
 * 作成日：2017年5月22日
 * 作成者：浅田　知嗣
 */

#include <iostream>

using namespace std;

//unsigned型のビット構成を乗算により求めて表示する関数の宣言。
void print_bits(unsigned x);

int main()
{
	unsigned	a;		//ビット構成を表示したい符号なし整数。
	int			n;		//シフトしたい桁数を入力する整数。

	//確かめたい整数の入力。
	cout	<<"非負の整数を入力せよ：";
	cin		>>a;

	//何桁シフトするかを入力する。
	cout	<<"何桁シフトしますか：";
	cin		>>n;

	//入力された値を2進数に変換して表示。
	cout	<<"2進数に変換：";
	print_bits(a);
	cout	<<'\n';

	//nビットシフトした値を10進数で表示。
	//2のnビット乗した値が帰ってくる。
	cout	<<"左に"	<<n	<<"ビットシフトしました。\n";
	cout	<<"10進数："	<<(a << n)	<<'\n';

	//2進数で表示。
	cout	<<"2進数：";
	print_bits(a << n);
	cout	<<'\n';

	//nビットシフトした値を10進数で表示。
	//2の-nビット乗した値が帰ってくる。
	cout	<<"右に"	<<n	<<"ビットシフトしました。\n";
	cout	<<"10進数："	<<(a >> n)	<<'\n';

	//2進数で表示。
	cout	<<"2進数：";
	print_bits(a >> n);
	cout	<<'\n';

	return 0;
}

void print_bits(unsigned x)
{
	int a[32] = {0};		//2進に変換したものを代入する配列。ビット数は16として配列の要素数は16としている。

	//受けとった整数が0より大きい間2で割り続け、あまりが出た場合は1を代入し出なかった場合0を代入する。
	for(int i =0; x > 0; x /= 2) {
		//余りが出なかったとき。
		if(x % 2 == 0) {
			a[i] = 0;	//0を代入。
		//余りが出たとき。
		} else {
			a[i] = 1;	//1を代入。
		}
		i++;	//iをインクリメントする。
	}

	//先ほど求めた配列を逆順に表示する。
	//16ビット分表示したいため、繰り返し回数を16回としている。
	for(int i = 31; i >= 0; i--) {
		cout	<<a[i];
	}

	cout	<<'\n';
}
